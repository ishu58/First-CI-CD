parameters:
- name: SolutionPath
  type: string
  default: ''
- name: BuildTargetPath
  type: string
  default: ''
- name: BuildConfiguration
  type: string
  default: 'Release'
- name: OutputName
  type: string
  default: ''
- name: ArtifactName
  type: string
  default: 'drop'
- name: DotNetVersion
  type: string
  default: '7.x'
- name: UnitTestPath
  type: string
  default: ''

jobs:
- job: build_and_package_${{ parameters.OutputName}}
  displayName: Build and Package ${{ parameters.OutputName }}
  variables:
    - name: buildConfiguration
      value: ${{ parameters.BuildConfiguration }}
    - name: NUGET_PLUGIN_HANDSHAKE_TIMEOUT_IN_SECONDS
      value: 60
    - name: NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS
      value: 60

  steps:
  - task: NuGetToolInstaller@1
    displayName: 'Update NuGet'
    inputs:
      checkLatest: true

  - task: NuGetAuthenticate@1
    inputs:
      forceReinstallCredentialProvider: true

  - task: NuGetCommand@2
    displayName: Restore Solution Packages
    enabled: false
    inputs:
      restoreSolution: ${{ parameters.SolutionPath }}
      feedsToUse: 'config'
      nugetConfigPath: Nuget.config

  - task: UseDotNet@2
    inputs:
      version: ${{ parameters.DotNetVersion }} # Specify the version you need

  - task: DotNetCoreCLI@2
    displayName: 'Build ${{ parameters.BuildTargetPath }}'
    inputs:
      command: 'publish'
      projects: ${{ parameters.BuildTargetPath }}
      arguments: '-c $(buildConfiguration) -r win-x64 --self-contained true -o:"$(build.artifactstagingdirectory)"'
      publishWebProjects: false
      zipAfterPublish: false

  - task: DotNetCoreCLI@2
    displayName: 'Run UnitTest'
    condition: ne('${{ parameters.UnitTestPath }}', '')
    inputs:
      command: test
      projects: ${{ parameters.UnitTestPath }}
      publishTestResults: true
      arguments: --configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover

  - task: PublishCodeCoverageResults@2
    displayName: Publish code coverage
    condition: ne('${{ parameters.UnitTestPath }}', '')
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

  - task: ArchiveFiles@2
    displayName: Zip Build Artifacts
    inputs:
      rootFolderOrFile: $(build.artifactstagingdirectory)
      includeRootFolder: false
      archiveFile: $(build.artifactstagingdirectory)/$(Build.BuildNumber)${{ parameters.OutputName }}.zip

  - task: PublishBuildArtifacts@1
    displayName: 'Publish ${{ parameters.BuildTargetPath }}'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)/$(Build.BuildNumber)${{ parameters.OutputName }}.zip'
      ArtifactName: ${{ parameters.ArtifactName }}

